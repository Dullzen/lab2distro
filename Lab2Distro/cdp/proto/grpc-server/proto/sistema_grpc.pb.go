// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: sistema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LCPService_ObtenerListaEntrenadores_FullMethodName = "/sistema.LCPService/ObtenerListaEntrenadores"
	LCPService_ObtenerTorneos_FullMethodName           = "/sistema.LCPService/ObtenerTorneos"
	LCPService_InscribirEntrenador_FullMethodName      = "/sistema.LCPService/InscribirEntrenador"
	LCPService_AsignarCombate_FullMethodName           = "/sistema.LCPService/AsignarCombate"
	LCPService_RegistrarEntrenador_FullMethodName      = "/sistema.LCPService/RegistrarEntrenador"
	LCPService_EnviarResultadoCombate_FullMethodName   = "/sistema.LCPService/EnviarResultadoCombate"
	LCPService_VerificarEntrenadores_FullMethodName    = "/sistema.LCPService/VerificarEntrenadores"
	LCPService_NotificarCambioRanking_FullMethodName   = "/sistema.LCPService/NotificarCambioRanking"
)

// LCPServiceClient is the client API for LCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LCPServiceClient interface {
	ObtenerListaEntrenadores(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaEntrenadores, error)
	ObtenerTorneos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaTorneos, error)
	InscribirEntrenador(ctx context.Context, in *SolicitudInscripcion, opts ...grpc.CallOption) (*ResultadoOperacion, error)
	AsignarCombate(ctx context.Context, in *SolicitudCombate, opts ...grpc.CallOption) (*ResultadoCombate, error)
	RegistrarEntrenador(ctx context.Context, in *Entrenador, opts ...grpc.CallOption) (*ResultadoOperacion, error)
	EnviarResultadoCombate(ctx context.Context, in *ResultadoCombateDesdeRabbit, opts ...grpc.CallOption) (*ResultadoOperacion, error)
	VerificarEntrenadores(ctx context.Context, in *VerificacionEntrenadores, opts ...grpc.CallOption) (*ResultadoVerificacion, error)
	NotificarCambioRanking(ctx context.Context, in *RankingUpdate, opts ...grpc.CallOption) (*RankingUpdateResponse, error)
}

type lCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLCPServiceClient(cc grpc.ClientConnInterface) LCPServiceClient {
	return &lCPServiceClient{cc}
}

func (c *lCPServiceClient) ObtenerListaEntrenadores(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaEntrenadores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaEntrenadores)
	err := c.cc.Invoke(ctx, LCPService_ObtenerListaEntrenadores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) ObtenerTorneos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaTorneos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaTorneos)
	err := c.cc.Invoke(ctx, LCPService_ObtenerTorneos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) InscribirEntrenador(ctx context.Context, in *SolicitudInscripcion, opts ...grpc.CallOption) (*ResultadoOperacion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoOperacion)
	err := c.cc.Invoke(ctx, LCPService_InscribirEntrenador_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) AsignarCombate(ctx context.Context, in *SolicitudCombate, opts ...grpc.CallOption) (*ResultadoCombate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoCombate)
	err := c.cc.Invoke(ctx, LCPService_AsignarCombate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) RegistrarEntrenador(ctx context.Context, in *Entrenador, opts ...grpc.CallOption) (*ResultadoOperacion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoOperacion)
	err := c.cc.Invoke(ctx, LCPService_RegistrarEntrenador_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) EnviarResultadoCombate(ctx context.Context, in *ResultadoCombateDesdeRabbit, opts ...grpc.CallOption) (*ResultadoOperacion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoOperacion)
	err := c.cc.Invoke(ctx, LCPService_EnviarResultadoCombate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) VerificarEntrenadores(ctx context.Context, in *VerificacionEntrenadores, opts ...grpc.CallOption) (*ResultadoVerificacion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoVerificacion)
	err := c.cc.Invoke(ctx, LCPService_VerificarEntrenadores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lCPServiceClient) NotificarCambioRanking(ctx context.Context, in *RankingUpdate, opts ...grpc.CallOption) (*RankingUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RankingUpdateResponse)
	err := c.cc.Invoke(ctx, LCPService_NotificarCambioRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LCPServiceServer is the server API for LCPService service.
// All implementations must embed UnimplementedLCPServiceServer
// for forward compatibility.
type LCPServiceServer interface {
	ObtenerListaEntrenadores(context.Context, *Empty) (*ListaEntrenadores, error)
	ObtenerTorneos(context.Context, *Empty) (*ListaTorneos, error)
	InscribirEntrenador(context.Context, *SolicitudInscripcion) (*ResultadoOperacion, error)
	AsignarCombate(context.Context, *SolicitudCombate) (*ResultadoCombate, error)
	RegistrarEntrenador(context.Context, *Entrenador) (*ResultadoOperacion, error)
	EnviarResultadoCombate(context.Context, *ResultadoCombateDesdeRabbit) (*ResultadoOperacion, error)
	VerificarEntrenadores(context.Context, *VerificacionEntrenadores) (*ResultadoVerificacion, error)
	NotificarCambioRanking(context.Context, *RankingUpdate) (*RankingUpdateResponse, error)
	mustEmbedUnimplementedLCPServiceServer()
}

// UnimplementedLCPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLCPServiceServer struct{}

func (UnimplementedLCPServiceServer) ObtenerListaEntrenadores(context.Context, *Empty) (*ListaEntrenadores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerListaEntrenadores not implemented")
}
func (UnimplementedLCPServiceServer) ObtenerTorneos(context.Context, *Empty) (*ListaTorneos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerTorneos not implemented")
}
func (UnimplementedLCPServiceServer) InscribirEntrenador(context.Context, *SolicitudInscripcion) (*ResultadoOperacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InscribirEntrenador not implemented")
}
func (UnimplementedLCPServiceServer) AsignarCombate(context.Context, *SolicitudCombate) (*ResultadoCombate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsignarCombate not implemented")
}
func (UnimplementedLCPServiceServer) RegistrarEntrenador(context.Context, *Entrenador) (*ResultadoOperacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarEntrenador not implemented")
}
func (UnimplementedLCPServiceServer) EnviarResultadoCombate(context.Context, *ResultadoCombateDesdeRabbit) (*ResultadoOperacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarResultadoCombate not implemented")
}
func (UnimplementedLCPServiceServer) VerificarEntrenadores(context.Context, *VerificacionEntrenadores) (*ResultadoVerificacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificarEntrenadores not implemented")
}
func (UnimplementedLCPServiceServer) NotificarCambioRanking(context.Context, *RankingUpdate) (*RankingUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificarCambioRanking not implemented")
}
func (UnimplementedLCPServiceServer) mustEmbedUnimplementedLCPServiceServer() {}
func (UnimplementedLCPServiceServer) testEmbeddedByValue()                    {}

// UnsafeLCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LCPServiceServer will
// result in compilation errors.
type UnsafeLCPServiceServer interface {
	mustEmbedUnimplementedLCPServiceServer()
}

func RegisterLCPServiceServer(s grpc.ServiceRegistrar, srv LCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedLCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LCPService_ServiceDesc, srv)
}

func _LCPService_ObtenerListaEntrenadores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).ObtenerListaEntrenadores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_ObtenerListaEntrenadores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).ObtenerListaEntrenadores(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_ObtenerTorneos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).ObtenerTorneos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_ObtenerTorneos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).ObtenerTorneos(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_InscribirEntrenador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudInscripcion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).InscribirEntrenador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_InscribirEntrenador_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).InscribirEntrenador(ctx, req.(*SolicitudInscripcion))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_AsignarCombate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudCombate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).AsignarCombate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_AsignarCombate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).AsignarCombate(ctx, req.(*SolicitudCombate))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_RegistrarEntrenador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entrenador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).RegistrarEntrenador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_RegistrarEntrenador_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).RegistrarEntrenador(ctx, req.(*Entrenador))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_EnviarResultadoCombate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultadoCombateDesdeRabbit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).EnviarResultadoCombate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_EnviarResultadoCombate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).EnviarResultadoCombate(ctx, req.(*ResultadoCombateDesdeRabbit))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_VerificarEntrenadores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificacionEntrenadores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).VerificarEntrenadores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_VerificarEntrenadores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).VerificarEntrenadores(ctx, req.(*VerificacionEntrenadores))
	}
	return interceptor(ctx, in, info, handler)
}

func _LCPService_NotificarCambioRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LCPServiceServer).NotificarCambioRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LCPService_NotificarCambioRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LCPServiceServer).NotificarCambioRanking(ctx, req.(*RankingUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// LCPService_ServiceDesc is the grpc.ServiceDesc for LCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistema.LCPService",
	HandlerType: (*LCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObtenerListaEntrenadores",
			Handler:    _LCPService_ObtenerListaEntrenadores_Handler,
		},
		{
			MethodName: "ObtenerTorneos",
			Handler:    _LCPService_ObtenerTorneos_Handler,
		},
		{
			MethodName: "InscribirEntrenador",
			Handler:    _LCPService_InscribirEntrenador_Handler,
		},
		{
			MethodName: "AsignarCombate",
			Handler:    _LCPService_AsignarCombate_Handler,
		},
		{
			MethodName: "RegistrarEntrenador",
			Handler:    _LCPService_RegistrarEntrenador_Handler,
		},
		{
			MethodName: "EnviarResultadoCombate",
			Handler:    _LCPService_EnviarResultadoCombate_Handler,
		},
		{
			MethodName: "VerificarEntrenadores",
			Handler:    _LCPService_VerificarEntrenadores_Handler,
		},
		{
			MethodName: "NotificarCambioRanking",
			Handler:    _LCPService_NotificarCambioRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sistema.proto",
}
